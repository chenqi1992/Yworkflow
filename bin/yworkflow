#!/usr/bin/env node

var chalk = require('chalk');
var spawn = require('child_process').spawn;
var path = require('path');
var absPath = '';
var shellPath = path.resolve(__dirname, '..');
var glob = require('glob');
var figlet = require('figlet');
var compareVersion = require('compare-version');
var packageFile = require('../package.json');
var request = require('request');

var optimist = require('optimist')
	.usage([chalk.blue('[说明] YWORKFLOW是一个智能的自动化构建和开发工具'), '[项目] https://github.com/yued-fe/Yworkflow', '[版本] ' + require('../package.json').version].join('\n'))
	.alias('h', 'help')
	.alias('v', 'version')
	.describe(chalk.green('path'), ':指定yworkflow配置')
	.describe(chalk.green('build'), ':执行build任务,不启动server服务')

var argv = optimist.argv;
var text = argv._.join(' ');

// gulp任务初始参数
let args = ['--gulpfile', path.join(shellPath, 'gulpfile.js')];

/**
 *显示yworkflow说明
 * @param  {[type]} argv.help [description]
 * @return {[type]}           [description]
 */
if (argv.help || !!text) {

	figlet('Yworkflow', function(err, data) {
		if (err) {
			console.log('Something went wrong...');
			console.dir(err);
			return;
		}
		console.log(chalk.bold.green(data))
	});
	return console.log(optimist.help());
}


function getLatesYworkflow() {
	return new Promise((resolve, reject) => {
		request({
			url: 'https://encrypt.proxy.is26.com/proxy/registry.npmjs.org/yworkflow',
			method: 'get'
		}, (err, res, body) => {
			if (res && res.statusCode === 200) {
				resolve(body);
			} else {
				reject(err);
			}
		});
	}).then(result => {
		return JSON.parse(result)['dist-tags'].latest;
	}).catch(err => {
		return require('../package.json').version;
	})
}



/**
 * 显示版本信息
 * @param  {[type]} argv.version [description]
 * @return {[type]}              [description]
 */
if (argv.version) {
	getLatesYworkflow().then(function(ver) {
		if (compareVersion(ver, require('../package.json').version) >= 1) {
			console.log(chalk.red('[注意]' + 'Yworkflow已经有更新版本,请及时升级'))
			console.log(chalk.green('[线上版本]:') + ver)
			console.log(chalk.green('[本地版本]:') + require('../package.json').version);
		};
		figlet(require('../package.json').version, function(err, data) {
			if (err) {
				console.log('Something went wrong...');
				console.log(chalk.green(data));
			}
		});

	})
	return;
}


/**
 * 指定配置
 * @param  {[type]} argv.version [description]
 * @return {[type]}              [description]
 */
if (argv.path) {
	absPath = path.resolve(process.env.PWD, argv.path);
} else {
	var matched = glob.sync(path.resolve(process.env.PWD, '*.yconfig'), {
		dot: true
	});
	if (matched.length !== 1) {
		throw new Error('工作目录没有或发现多个.yconfig, 请调用--path 手动指定');
		return;
	}
	absPath = path.resolve(process.env.PWD, matched[0]);
}

/**
 * 是否只执行build任务
 * @param  {[type]} argv.version [description]
 * @return {[type]}              [description]
 */
if (argv.build) {
	args = args.concat('build');
}

// 强制做检查更新提示
getLatesYworkflow().then(function(ver) {
	if (compareVersion(ver, require('../package.json').version) >= 1) {
		console.log(chalk.bgRed('[重要提示]' +'Yworkflow已经更新,请及时升级'))
		console.log(chalk.bgRed('[线上版本]:' + ver))
		console.log(chalk.bgRed('[本地版本]:' + require('../package.json').version));
		console.log(chalk.bgBlue('[升级方法]:npm install -g yworkflow '));
	};
	args = args.concat('--path', absPath);
	require('child_process').fork(path.join(shellPath, 'node_modules/gulp/bin/gulp'), args)
})